/*
小型商品销售系统脚本
运行该脚本的前题条件是已经有：
1.数据库用户：study
2.study用户必须可以访问表空间USERS和USERS02
3.study用户必须有创建视图权限：Create View 的权限

下面是创建用户study的SQL语句：
CREATE USER STUDY IDENTIFIED BY Cddx123 
DEFAULT TABLESPACE "USERS"
TEMPORARY TABLESPACE "TEMP";

下面是手工增加的一个表空间USERS02。
Create Tablespace Users02 
datafile 
'/home/oracle/app/oracle/oradata/orcl/pdborcl/pdbtest_users02_1.dbf'
  SIZE 100M AUTOEXTEND ON NEXT 256M MAXSIZE UNLIMITED,
'/home/oracle/app/oracle/oradata/orcl/pdborcl/pdbtest_users02_2.dbf' 
  SIZE 100M AUTOEXTEND ON NEXT 256M MAXSIZE UNLIMITED
EXTENT MANAGEMENT LOCAL SEGMENT SPACE MANAGEMENT AUTO;

下面是给用户分配表空间配额和授权的语句
-- QUOTAS
ALTER USER STUDY QUOTA UNLIMITED ON USERS;
ALTER USER STUDY QUOTA UNLIMITED ON USERS02;

-- ROLES
GRANT "CONNECT" TO STUDY WITH ADMIN OPTION;
GRANT "RESOURCE" TO STUDY WITH ADMIN OPTION;
ALTER USER STUDY DEFAULT ROLE "CONNECT","RESOURCE";

-- SYSTEM PRIVILEGES
GRANT CREATE VIEW TO STUDY WITH ADMIN OPTION;

--下面是由system用户创建目录chapter14_dir，并授予study用户读写。
create or replace directory chapter14_dir as '/home/oracle/study/program/chapter14';
grant read,write on directory chapter14_dir to study


参考：
1. oracle分区技术-- interval parition实验及总结 
   http://blog.chinaunix.net/uid-23284114-id-3304525.html
*/


--请以study登录后运行以下脚本，典型的登录方法是：
--sqlplus study/123@localhost/pdborcl


--删除study用户拥有的对象：表，序列，程序，函数，包等
--删除表的同时会一起删除主外键、触发器、程序包。
declare 
      num   number; 
begin 
      select count(1) into num from user_tables where TABLE_NAME = 'DEPARTMENTS'; 
      if   num=1   then 
          execute immediate 'drop table DEPARTMENTS cascade constraints PURGE'; 
      end   if; 

      select count(1) into num from user_tables where TABLE_NAME = 'EMPLOYEES'; 
      if   num=1   then 
          execute immediate 'drop table EMPLOYEES cascade constraints PURGE'; 
      end   if; 

      select count(1) into num from user_tables where TABLE_NAME = 'ORDER_ID_TEMP'; 
      if   num=1   then 
          execute immediate 'drop table ORDER_ID_TEMP cascade constraints PURGE'; 
      end   if; 
      
      select count(1) into num from user_tables where TABLE_NAME = 'ORDER_DETAILS'; 
      if   num=1   then 
          execute immediate 'drop table ORDER_DETAILS cascade constraints PURGE'; 
      end   if; 
      
      select count(1) into num from user_tables where TABLE_NAME = 'ORDERS'; 
      if   num=1   then 
          execute immediate 'drop table ORDERS cascade constraints PURGE'; 
      end   if; 
      
      select count(1) into num from user_tables where TABLE_NAME = 'PRODUCTS'; 
      if   num=1   then 
          execute immediate 'drop table PRODUCTS cascade constraints PURGE'; 
      end   if; 

      select count(1) into num from user_sequences where SEQUENCE_NAME = 'SEQ_ORDER_DETAILS_ID'; 
      if   num=1   then 
          execute immediate 'drop  SEQUENCE SEQ_ORDER_DETAILS_ID'; 
      end   if;       
 
      select count(1) into num from user_sequences where SEQUENCE_NAME = 'SEQ_ORDER_ID'; 
      if   num=1   then 
          execute immediate 'drop  SEQUENCE SEQ_ORDER_ID'; 
      end   if;
      select count(1) into num from user_views where VIEW_NAME = 'VIEW_ORDER_DETAILS'; 
      if   num=1   then 
          execute immediate 'drop VIEW VIEW_ORDER_DETAILS'; 
      end   if;
      
      SELECT count(object_name)  into num FROM user_objects_ae WHERE object_type = 'PACKAGE' and OBJECT_NAME='MYPACK'; 
      if   num=1   then 
          execute immediate 'DROP PACKAGE MYPACK'; 
      end   if;      
end; 
/ 
--------------------------------------------------------
--  DDL for Table DEPARTMENTS
--------------------------------------------------------
CREATE TABLE DEPARTMENTS 
(
  DEPARTMENT_ID NUMBER(6, 0) NOT NULL 
, DEPARTMENT_NAME VARCHAR2(40 BYTE) NOT NULL
, CONSTRAINT DEPARTMENTS_PK PRIMARY KEY 
  (
    DEPARTMENT_ID 
  )
  USING INDEX 
  (
      CREATE UNIQUE INDEX DEPARTMENTS_PK ON DEPARTMENTS (DEPARTMENT_ID ASC) 
      NOLOGGING 
      TABLESPACE USERS 
      PCTFREE 10 
      INITRANS 2 
      STORAGE 
      ( 
        INITIAL 65536 
        NEXT 1048576 
        MINEXTENTS 1 
        MAXEXTENTS UNLIMITED 
        BUFFER_POOL DEFAULT 
      ) 
      NOPARALLEL 
  )
  ENABLE 
) 
NOLOGGING 
TABLESPACE USERS 
PCTFREE 10 
INITRANS 1 
STORAGE 
( 
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1 
  MAXEXTENTS UNLIMITED 
  BUFFER_POOL DEFAULT 
) 
NOCOMPRESS NO INMEMORY NOPARALLEL;



--------------------------------------------------------
--  DDL for Table EMPLOYEES
--------------------------------------------------------
CREATE TABLE EMPLOYEES 
(
  EMPLOYEE_ID NUMBER(6, 0) NOT NULL 
, NAME VARCHAR2(40 BYTE) NOT NULL 
, EMAIL VARCHAR2(40 BYTE) 
, PHONE_NUMBER VARCHAR2(40 BYTE) 
, HIRE_DATE DATE NOT NULL 
, SALARY NUMBER(8, 2) 
, MANAGER_ID NUMBER(6, 0) 
, DEPARTMENT_ID NUMBER(6, 0) 
, PHOTO BLOB 
, CONSTRAINT EMPLOYEES_PK PRIMARY KEY 
  (
    EMPLOYEE_ID 
  )
  USING INDEX 
  (
      CREATE UNIQUE INDEX EMPLOYEES_PK ON EMPLOYEES (EMPLOYEE_ID ASC) 
      NOLOGGING 
      TABLESPACE USERS 
      PCTFREE 10 
      INITRANS 2 
      STORAGE 
      ( 
        INITIAL 65536 
        NEXT 1048576 
        MINEXTENTS 1 
        MAXEXTENTS UNLIMITED 
        BUFFER_POOL DEFAULT 
      ) 
      NOPARALLEL 
  )
  ENABLE 
) 
NOLOGGING 
TABLESPACE USERS 
PCTFREE 10 
INITRANS 1 
STORAGE 
( 
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1 
  MAXEXTENTS UNLIMITED 
  BUFFER_POOL DEFAULT 
) 
NOCOMPRESS 
NO INMEMORY 
NOPARALLEL 
LOB (PHOTO) STORE AS SYS_LOB0000092017C00009$$ 
( 
  ENABLE STORAGE IN ROW 
  CHUNK 8192 
  NOCACHE 
  NOLOGGING 
  TABLESPACE USERS 
  STORAGE 
  ( 
    INITIAL 106496 
    NEXT 1048576 
    MINEXTENTS 1 
    MAXEXTENTS UNLIMITED 
    BUFFER_POOL DEFAULT 
  )  
);

CREATE INDEX EMPLOYEES_INDEX1_NAME ON EMPLOYEES (NAME ASC) 
NOLOGGING 
TABLESPACE USERS 
PCTFREE 10 
INITRANS 2 
STORAGE 
( 
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1 
  MAXEXTENTS UNLIMITED 
  BUFFER_POOL DEFAULT 
) 
NOPARALLEL;

ALTER TABLE EMPLOYEES
ADD CONSTRAINT EMPLOYEES_FK1 FOREIGN KEY
(
  DEPARTMENT_ID 
)
REFERENCES DEPARTMENTS
(
  DEPARTMENT_ID 
)
ENABLE;

ALTER TABLE EMPLOYEES
ADD CONSTRAINT EMPLOYEES_FK2 FOREIGN KEY
(
  MANAGER_ID 
)
REFERENCES EMPLOYEES
(
  EMPLOYEE_ID 
)
ON DELETE SET NULL ENABLE;

ALTER TABLE EMPLOYEES
ADD CONSTRAINT EMPLOYEES_CHK1 CHECK 
(SALARY>0)
ENABLE;

ALTER TABLE EMPLOYEES
ADD CONSTRAINT EMPLOYEES_CHK2 CHECK 
(EMPLOYEE_ID<>MANAGER_ID)
ENABLE;

ALTER TABLE EMPLOYEES
ADD CONSTRAINT EMPLOYEES_EMPLOYEE_MANAGER_ID CHECK 
(MANAGER_ID<>EMPLOYEE_ID)
ENABLE;

ALTER TABLE EMPLOYEES
ADD CONSTRAINT EMPLOYEES_SALARY CHECK 
(SALARY>0)
ENABLE;


  
CREATE TABLE PRODUCTS 
(
  PRODUCT_ID VARCHAR2(40 BYTE) NOT NULL
, PRODUCT_NAME VARCHAR2(40 BYTE) NOT NULL  
, PRODUCT_TYPE VARCHAR2(40 BYTE) NOT NULL 
, CONSTRAINT PRODUCTS_PK PRIMARY KEY 
  (
    PRODUCT_ID 
  )
  ENABLE 
) 
LOGGING 
TABLESPACE "USERS" 
PCTFREE 10 
INITRANS 1 
STORAGE 
( 
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1 
  MAXEXTENTS 2147483645 
  BUFFER_POOL DEFAULT 
);

ALTER TABLE PRODUCTS
ADD CONSTRAINT PRODUCTS_CHK1 CHECK 
(PRODUCT_TYPE IN ('耗材', '手机', '电脑'))
ENABLE;
  
--------------------------------------------------------
--  DDL for Table ORDERS
--------------------------------------------------------
CREATE TABLE ORDERS 
(
  ORDER_ID NUMBER(10, 0) NOT NULL 
, CUSTOMER_NAME VARCHAR2(40 BYTE) NOT NULL 
, CUSTOMER_TEL VARCHAR2(40 BYTE) NOT NULL 
, ORDER_DATE DATE NOT NULL 
, EMPLOYEE_ID NUMBER(6, 0) NOT NULL 
, DISCOUNT NUMBER(8, 2) DEFAULT 0 
, TRADE_RECEIVABLE NUMBER(8, 2) DEFAULT 0 
) 
TABLESPACE USERS 
PCTFREE 10 
INITRANS 1 
STORAGE 
( 
  BUFFER_POOL DEFAULT 
) 
NOCOMPRESS 
NOPARALLEL 
PARTITION BY RANGE (ORDER_DATE) 
(
  PARTITION PARTITION_BEFORE_2016 VALUES LESS THAN (TO_DATE(' 2016-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) 
  NOLOGGING 
  TABLESPACE USERS 
  PCTFREE 10 
  INITRANS 1 
  STORAGE 
  ( 
    INITIAL 8388608 
    NEXT 1048576 
    MINEXTENTS 1 
    MAXEXTENTS UNLIMITED 
    BUFFER_POOL DEFAULT 
  ) 
  NOCOMPRESS NO INMEMORY  
, PARTITION PARTITION_BEFORE_2017 VALUES LESS THAN (TO_DATE(' 2017-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) 
  NOLOGGING 
  TABLESPACE USERS02 
  PCTFREE 10 
  INITRANS 1 
  STORAGE 
  ( 
    INITIAL 8388608 
    NEXT 1048576 
    MINEXTENTS 1 
    MAXEXTENTS UNLIMITED 
    BUFFER_POOL DEFAULT 
  ) 
  NOCOMPRESS NO INMEMORY  
);

--创建本地分区索引ORDERS_INDEX_DATE：
CREATE INDEX ORDERS_INDEX_DATE ON ORDERS (ORDER_DATE ASC) 
LOCAL 
(
  PARTITION PARTITION_BEFORE_2016 
    TABLESPACE USERS 
    PCTFREE 10 
    INITRANS 2 
    STORAGE 
    ( 
      INITIAL 8388608 
      NEXT 1048576 
      MINEXTENTS 1 
      MAXEXTENTS UNLIMITED 
      BUFFER_POOL DEFAULT 
    ) 
    NOCOMPRESS  
, PARTITION PARTITION_BEFORE_2017 
    TABLESPACE USERS02 
    PCTFREE 10 
    INITRANS 2 
    STORAGE 
    ( 
      INITIAL 8388608 
      NEXT 1048576 
      MINEXTENTS 1 
      MAXEXTENTS UNLIMITED 
      BUFFER_POOL DEFAULT 
    ) 
    NOCOMPRESS  
) 
STORAGE 
( 
  BUFFER_POOL DEFAULT 
) 
NOPARALLEL;

CREATE INDEX ORDERS_INDEX_CUSTOMER_NAME ON ORDERS (CUSTOMER_NAME ASC) 
NOLOGGING 
TABLESPACE USERS 
PCTFREE 10 
INITRANS 2 
STORAGE 
( 
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1 
  MAXEXTENTS UNLIMITED 
  BUFFER_POOL DEFAULT 
) 
NOPARALLEL;

CREATE UNIQUE INDEX ORDERS_PK ON ORDERS (ORDER_ID ASC) 
GLOBAL PARTITION BY HASH (ORDER_ID) 
(
  PARTITION INDEX_PARTITION1 TABLESPACE USERS 
    NOCOMPRESS  
, PARTITION INDEX_PARTITION2 TABLESPACE USERS02 
    NOCOMPRESS  
) 
NOLOGGING 
TABLESPACE USERS 
PCTFREE 10 
INITRANS 2 
STORAGE 
( 
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1 
  MAXEXTENTS UNLIMITED 
  BUFFER_POOL DEFAULT 
) 
NOPARALLEL;

ALTER TABLE ORDERS
ADD CONSTRAINT ORDERS_PK PRIMARY KEY 
(
  ORDER_ID 
)
USING INDEX ORDERS_PK
ENABLE;

ALTER TABLE ORDERS
ADD CONSTRAINT ORDERS_FK1 FOREIGN KEY
(
  EMPLOYEE_ID 
)
REFERENCES EMPLOYEES
(
  EMPLOYEE_ID 
)
ENABLE;

CREATE TABLE ORDER_DETAILS 
(
  ID NUMBER(10, 0) NOT NULL 
, ORDER_ID NUMBER(10, 0) NOT NULL
, PRODUCT_ID VARCHAR2(40 BYTE) NOT NULL 
, PRODUCT_NUM NUMBER(8, 2) NOT NULL 
, PRODUCT_PRICE NUMBER(8, 2) NOT NULL 
, CONSTRAINT ORDER_DETAILS_FK1 FOREIGN KEY
  (
  ORDER_ID 
  )
  REFERENCES ORDERS
  (
  ORDER_ID 
  )
  ENABLE 
) 
TABLESPACE USERS 
PCTFREE 10 
INITRANS 1 
STORAGE 
( 
  BUFFER_POOL DEFAULT 
) 
NOCOMPRESS 
NOPARALLEL 
PARTITION BY REFERENCE (ORDER_DETAILS_FK1)
(
  PARTITION PARTITION_BEFORE_2016 
  NOLOGGING 
  TABLESPACE USERS --必须指定表空间，否则会将分区存储在用户的默认表空间中
  PCTFREE 10 
  INITRANS 1 
  STORAGE 
  (
    INITIAL 8388608 
    NEXT 1048576 
    MINEXTENTS 1 
    MAXEXTENTS UNLIMITED 
    BUFFER_POOL DEFAULT 
  ) 
  NOCOMPRESS NO INMEMORY, 
  PARTITION PARTITION_BEFORE_2017 
  NOLOGGING 
  TABLESPACE USERS02
  PCTFREE 10 
  INITRANS 1 
  STORAGE 
  ( 
    INITIAL 8388608 
    NEXT 1048576 
    MINEXTENTS 1 
    MAXEXTENTS UNLIMITED 
    BUFFER_POOL DEFAULT 
  ) 
  NOCOMPRESS NO INMEMORY  
)
;

CREATE UNIQUE INDEX ORDER_DETAILS_PK ON ORDER_DETAILS (ID ASC) 
NOLOGGING 
TABLESPACE USERS 
PCTFREE 10 
INITRANS 2 
STORAGE 
( 
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1 
  MAXEXTENTS UNLIMITED 
  BUFFER_POOL DEFAULT 
) 
NOPARALLEL;

ALTER TABLE ORDER_DETAILS
ADD CONSTRAINT ORDER_DETAILS_PK PRIMARY KEY 
(
  ID 
)
USING INDEX ORDER_DETAILS_PK
ENABLE;

--这个索引是必须的，可以使整个订单的详单存放在一起
CREATE INDEX ORDER_DETAILS_ORDER_ID ON ORDER_DETAILS (ORDER_ID) 
GLOBAL PARTITION BY HASH (ORDER_ID) 
(
  PARTITION INDEX_PARTITION1 TABLESPACE USERS 
    NOCOMPRESS  
, PARTITION INDEX_PARTITION2 TABLESPACE USERS02 
    NOCOMPRESS  
);

ALTER TABLE ORDER_DETAILS
ADD CONSTRAINT ORDER_DETAILS_PRODUCT_NUM CHECK 
(Product_Num>0)
ENABLE;

ALTER TABLE ORDER_DETAILS
ADD CONSTRAINT ORDER_DETAILS_FK2 FOREIGN KEY
(
  PRODUCT_ID 
)
REFERENCES PRODUCTS
(
  PRODUCT_ID 
)
ENABLE;

--------------------------------------------------------
--  DDL for Table ORDER_ID_TEMP
CREATE GLOBAL TEMPORARY TABLE "ORDER_ID_TEMP" 
   (	"ORDER_ID" NUMBER(10,0) NOT NULL ENABLE, 
	 CONSTRAINT "ORDER_ID_TEMP_PK" PRIMARY KEY ("ORDER_ID") ENABLE
   ) ON COMMIT DELETE ROWS ;

   COMMENT ON TABLE "ORDER_ID_TEMP"  IS '用于触发器存储临时ORDER_ID';
  

--创建3个触发器
--------------------------------------------------------
--  DDL for Trigger ORDERS_TRIG_ROW_LEVEL
--------------------------------------------------------
CREATE OR REPLACE EDITIONABLE TRIGGER "ORDERS_TRIG_ROW_LEVEL" 
BEFORE INSERT OR UPDATE OF DISCOUNT ON "ORDERS" 
FOR EACH ROW --行级触发器
declare
  m number(8,2);
BEGIN
  if inserting then
       :new.TRADE_RECEIVABLE := - :new.discount; 
  else
      select sum(PRODUCT_NUM*PRODUCT_PRICE) into m from ORDER_DETAILS where ORDER_ID=:old.ORDER_ID;
      if m is null then
        m:=0;
      end if;
      :new.TRADE_RECEIVABLE := m - :new.discount;
  end if;
END;
/

--------------------------------------------------------
--  DDL for Trigger ORDER_DETAILS_ROW_TRIG
--------------------------------------------------------

CREATE OR REPLACE EDITIONABLE TRIGGER "ORDER_DETAILS_ROW_TRIG" 
AFTER DELETE OR INSERT OR UPDATE  ON ORDER_DETAILS 
FOR EACH ROW 
BEGIN
  --DBMS_OUTPUT.PUT_LINE(:NEW.ORDER_ID);
  IF :NEW.ORDER_ID IS NOT NULL THEN
    MERGE INTO ORDER_ID_TEMP A
    USING (SELECT 1 FROM DUAL) B
    ON (A.ORDER_ID=:NEW.ORDER_ID)
    WHEN NOT MATCHED THEN
      INSERT (ORDER_ID) VALUES(:NEW.ORDER_ID);
  END IF;
  IF :OLD.ORDER_ID IS NOT NULL THEN
    MERGE INTO ORDER_ID_TEMP A
    USING (SELECT 1 FROM DUAL) B
    ON (A.ORDER_ID=:OLD.ORDER_ID)
    WHEN NOT MATCHED THEN
      INSERT (ORDER_ID) VALUES(:OLD.ORDER_ID);
  END IF;  
END;
/

--------------------------------------------------------
--  DDL for Trigger ORDER_DETAILS_SNTNS_TRIG
--------------------------------------------------------

CREATE OR REPLACE EDITIONABLE TRIGGER "ORDER_DETAILS_SNTNS_TRIG" 
AFTER DELETE OR INSERT OR UPDATE ON ORDER_DETAILS 
declare
  m number(8,2);
BEGIN
  FOR R IN (SELECT ORDER_ID FROM ORDER_ID_TEMP)
  LOOP
    --DBMS_OUTPUT.PUT_LINE(R.ORDER_ID);
    select sum(PRODUCT_NUM*PRODUCT_PRICE) into m from ORDER_DETAILS 
      where ORDER_ID=R.ORDER_ID;
    if m is null then
      m:=0;
    end if;
    UPDATE ORDERS SET TRADE_RECEIVABLE = m - discount 
      WHERE ORDER_ID=R.ORDER_ID;    
  END LOOP;
  delete from ORDER_ID_TEMP; --这句话很重要，否则可能一直不释放空间，后继插入会非常慢。
END;
/

--------------------------------------------------------
--  DDL for Sequence SEQ_ORDER_ID
--------------------------------------------------------
CREATE SEQUENCE  "SEQ_ORDER_ID"  MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 2000 ORDER  NOCYCLE  NOPARTITION ;
--------------------------------------------------------
--  DDL for Sequence SEQ_ORDER_DETAILS_ID
--------------------------------------------------------
CREATE SEQUENCE  "SEQ_ORDER_DETAILS_ID"  MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 2000 ORDER  NOCYCLE  NOPARTITION ;

--------------------------------------------------------
--  DDL for View VIEW_ORDER_DETAILS
--------------------------------------------------------
CREATE OR REPLACE VIEW VIEW_ORDER_DETAILS
AS SELECT
  d.ID,
  o.ORDER_ID,
  o.CUSTOMER_NAME,o.CUSTOMER_TEL,o.ORDER_DATE,
  d.PRODUCT_ID,  
  p.PRODUCT_NAME,  
  p.PRODUCT_TYPE,
  d.PRODUCT_NUM,
  d.PRODUCT_PRICE
FROM ORDERS o,ORDER_DETAILS d,PRODUCTS p where d.ORDER_ID=o.ORDER_ID and d.PRODUCT_ID=p.PRODUCT_ID;
/

--修改员工的照片
create or replace procedure update_blob(RECID IN INTEGER,FName IN VARCHAR2) IS
  DEST_LOB BLOB;
  V_FILE BFILE ; 
  V_Fsize INTEGER ; 
BEGIN
 V_FILE := BFILENAME('CHAPTER14_DIR', FName);
 UPDATE employees SET PHOTO=EMPTY_BLOB() 
    WHERE EMPLOYEE_ID= RECID RETURN PHOTO INTO DEST_LOB; 
 v_FSize := DBMS_LOB.GETLENGTH(v_file);
 DBMS_OUTPUT.PUT_LINE('File size: ' || v_Fsize);
 DBMS_LOB.FILEOPEN(V_FILE);
 DBMS_LOB.LOADFROMFILE(DEST_LOB, V_FILE, DBMS_LOB.LOBMAXSIZE);
 DBMS_LOB.FILECLOSEALL;
 COMMIT;
  
EXCEPTION 
   WHEN OTHERS THEN 
      DBMS_OUTPUT.PUT_LINE('在更新BLOB内容时不成功,ID=' || RECID ) ; 
END;
/

create or replace PACKAGE MyPack IS
   TYPE refcur is ref cursor;
   FUNCTION Get_SaleAmount(V_DEPARTMENT_ID NUMBER) RETURN NUMBER;
   PROCEDURE Get_Employees(V_EMPLOYEE_ID NUMBER);
   FUNCTION Get_EmployeeByPage(v_pageidx number,v_pagesize number) return refcur;
   PROCEDURE Get_EmployeeByPage_P(v_pageidx number,v_pagesize number,rc out refcur);
   PROCEDURE Calc_All_TradeReceivable;
END MyPack;
/

create or replace PACKAGE BODY MyPack IS
    FUNCTION Get_SaleAmount(V_DEPARTMENT_ID NUMBER) RETURN NUMBER
    AS
      N NUMBER(20,2); --注意，订单ORDERS.TRADE_RECEIVABLE的类型是NUMBER(8,2),汇总之后，数据要大得多。
    BEGIN
      SELECT SUM(O.TRADE_RECEIVABLE) into N  FROM ORDERS O,EMPLOYEES E
        WHERE O.EMPLOYEE_ID=E.EMPLOYEE_ID AND E.DEPARTMENT_ID =V_DEPARTMENT_ID;
      RETURN N;
    END;

    PROCEDURE GET_EMPLOYEES(V_EMPLOYEE_ID NUMBER)
    AS
      LEFTSPACE VARCHAR(2000);
    begin
      --通过LEVEL判断递归的级别
      LEFTSPACE:=' ';
      --使用游标
      for v in
        (SELECT LEVEL,EMPLOYEE_ID,NAME,MANAGER_ID FROM employees 
          START WITH EMPLOYEE_ID = V_EMPLOYEE_ID 
          CONNECT BY PRIOR EMPLOYEE_ID = MANAGER_ID)
      LOOP
        DBMS_OUTPUT.PUT_LINE(LPAD(LEFTSPACE,(V.LEVEL-1)*4,' ')||
          V.EMPLOYEE_ID||' '||v.NAME);
      END LOOP;   
   END;
   
   /*
   FUNCTION Get_EmployeeByPage（）：分页方法获取员工表
   v_pageidx：页码，从1开始
   v_pagesize：每页的记录数量
   测试方法：
set serveroutput on
declare
rc sys_refcursor;
lrow employees%rowtype; 
begin
    rc := MYPACK.Get_EmployeeByPage(2,3);    
    loop
      FETCH rc INTO lrow;
      exit when rc%notfound;      
      DBMS_OUTPUT.put_line (lrow.employee_id || '  '|| lrow.name);
    end loop;
    CLOSE rc;    --关闭游标
end;
   */
   FUNCTION Get_EmployeeByPage(v_pageidx number,v_pagesize number) return refcur
   IS
     rc refcur;
     v_offset number;
     v_sql varchar2(2000);
   BEGIN
      v_offset:=v_pagesize*(v_pageidx-1);
      v_sql := 'select * from employees offset :v_offset rows fetch next :v_pagesize rows only';
      open rc for v_sql using v_offset,v_pagesize;
      return rc;
   END;
   
   /*
   PROCEDURE Get_EmployeeByPage_P（）：分页方法获取员工表
   v_pageidx：页码，从1开始
   v_pagesize：每页的记录数量
   rc:返回的参照游标
   测试方法：
set serveroutput on
declare
rc sys_refcursor;
lrow employees%rowtype; 
begin
    MYPACK.Get_EmployeeByPage_P(1,3,rc);    
    loop
      FETCH rc INTO lrow;
      exit when rc%notfound;      
      DBMS_OUTPUT.put_line (lrow.employee_id || '  '|| lrow.name);
    end loop;
    CLOSE rc;    --关闭游标
end;
   */   
   PROCEDURE Get_EmployeeByPage_P(v_pageidx number,v_pagesize number,rc out refcur)
   IS
     v_offset number;
     v_sql varchar2(2000);
   BEGIN
      v_offset:=v_pagesize*(v_pageidx-1);
      v_sql := 'select * from employees offset :v_offset rows fetch next :v_pagesize rows only';
      open rc for v_sql using v_offset,v_pagesize;
   END;
   
/*
--更新订单表中每个订单的应收款。
--SELECT * FROM ORDERS WHERE ROWNUM<100
--UPDATE ORDERS SET TRADE_RECEIVABLE=0
BEGIN
MYPACK.Calc_All_TradeReceivable;
END;
*/
   PROCEDURE Calc_All_TradeReceivable
   IS
        m number(10,2);
   BEGIN
        FOR R IN (SELECT ORDER_ID FROM ORDERS)
        LOOP
          select sum(PRODUCT_NUM*PRODUCT_PRICE) into m from ORDER_DETAILS where ORDER_ID=R.ORDER_ID;
          if m is null then
            m:=0;
          end if;
          update ORDERS SET TRADE_RECEIVABLE=m-DISCOUNT WHERE ORDER_ID=R.ORDER_ID;
        END LOOP;
  END;
  
END MyPack;
/


--批量插入订单数据之前，禁用触发器
ALTER TRIGGER "ORDERS_TRIG_ROW_LEVEL" DISABLE;
ALTER TRIGGER "ORDER_DETAILS_ROW_TRIG" DISABLE;
ALTER TRIGGER "ORDER_DETAILS_SNTNS_TRIG" DISABLE;

--插入DEPARTMENTS，EMPLOYEES数据
INSERT INTO DEPARTMENTS(DEPARTMENT_ID,DEPARTMENT_NAME) values (1,'总经办');
INSERT INTO EMPLOYEES(EMPLOYEE_ID,NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,SALARY,MANAGER_ID,DEPARTMENT_ID) 
  VALUES (1,'赵老师',NULL,NULL,to_date('2010-1-1','yyyy-mm-dd'),50000,NULL,1);

INSERT INTO DEPARTMENTS(DEPARTMENT_ID,DEPARTMENT_NAME) values (11,'销售部1');
INSERT INTO EMPLOYEES(EMPLOYEE_ID,NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,SALARY,MANAGER_ID,DEPARTMENT_ID) 
  VALUES (11,'陈经理',NULL,NULL,to_date('2010-1-1','yyyy-mm-dd'),50000,1,1);
INSERT INTO EMPLOYEES(EMPLOYEE_ID,NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,SALARY,MANAGER_ID,DEPARTMENT_ID) 
  VALUES (111,'吴经理',NULL,NULL,to_date('2010-1-1','yyyy-mm-dd'),50000,11,11);
INSERT INTO EMPLOYEES(EMPLOYEE_ID,NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,SALARY,MANAGER_ID,DEPARTMENT_ID) 
  VALUES (112,'白经理',NULL,NULL,to_date('2010-1-1','yyyy-mm-dd'),50000,11,11);
  
INSERT INTO DEPARTMENTS(DEPARTMENT_ID,DEPARTMENT_NAME) values (12,'销售部2');
INSERT INTO EMPLOYEES(EMPLOYEE_ID,NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,SALARY,MANAGER_ID,DEPARTMENT_ID) 
  VALUES (12,'王总',NULL,NULL,to_date('2010-1-1','yyyy-mm-dd'),50000,1,1);
INSERT INTO EMPLOYEES(EMPLOYEE_ID,NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,SALARY,MANAGER_ID,DEPARTMENT_ID) 
  VALUES (121,'赵经理',NULL,NULL,to_date('2010-1-1','yyyy-mm-dd'),50000,12,12);
INSERT INTO EMPLOYEES(EMPLOYEE_ID,NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,SALARY,MANAGER_ID,DEPARTMENT_ID) 
  VALUES (122,'刘经理',NULL,NULL,to_date('2010-1-1','yyyy-mm-dd'),50000,12,12);

--给1,11号员工设置照片
exec update_blob(1,'person1.jpg')
exec update_blob(11,'person2.jpg')

insert into products (PRODUCT_ID,PRODUCT_NAME,PRODUCT_TYPE) values ('computer1','电脑1','电脑');
insert into products (PRODUCT_ID,PRODUCT_NAME,PRODUCT_TYPE) values ('computer2','电脑2','电脑');
insert into products (PRODUCT_ID,PRODUCT_NAME,PRODUCT_TYPE) values ('computer3','电脑3','电脑');

insert into products (PRODUCT_ID,PRODUCT_NAME,PRODUCT_TYPE) values ('phone1','手机1','手机');
insert into products (PRODUCT_ID,PRODUCT_NAME,PRODUCT_TYPE) values ('phone2','手机2','手机');
insert into products (PRODUCT_ID,PRODUCT_NAME,PRODUCT_TYPE) values ('phone3','手机3','手机');

insert into products (PRODUCT_ID,PRODUCT_NAME,PRODUCT_TYPE) values ('paper1','耗材1','耗材');
insert into products (PRODUCT_ID,PRODUCT_NAME,PRODUCT_TYPE) values ('paper2','耗材2','耗材');
insert into products (PRODUCT_ID,PRODUCT_NAME,PRODUCT_TYPE) values ('paper3','耗材3','耗材');

alter table orders nologging;
alter table order_details nologging;

alter session set workarea_size_policy=manual;
alter session set sort_area_size=1000000000;
alter session ENABLE parallel dml;

--批量插入订单数据，注意ORDERS.TRADE_RECEIVABLE（订单应收款）的自动计算,注意插入数据的速度
--2千万条记录，插入的时间是：18100秒（约5小时）
declare
  dt date;
  m number(8,2);
  V_EMPLOYEE_ID NUMBER(6);
  v_order_id number(10);
  v_name varchar2(100);
  v_tel varchar2(100);
  v number(10,2);
  
begin

  for i in 1..2000000
  loop
    if i mod 2 =0 then
      dt:=to_date('2015-3-2','yyyy-mm-dd')+(i mod 60);
    else
      dt:=to_date('2016-3-2','yyyy-mm-dd')+(i mod 60);
    end if;
    V_EMPLOYEE_ID:=CASE I MOD 6 WHEN 0 THEN 11 WHEN 1 THEN 111 WHEN 2 THEN 112 
                                WHEN 3 THEN 12 WHEN 4 THEN 121 ELSE 122 END; 
    --插入订单
    v_order_id:=SEQ_ORDER_ID.nextval; --应该将SEQ_ORDER_ID.nextval保存到变量中。
    v_name := 'aa'|| 'aa';
    v_name := 'zhang' || i;
    v_tel := '139888883' || i;
    
    insert /*+append*/ /*+parallel(BASE_FMLG,4) */ into ORDERS (ORDER_ID,CUSTOMER_NAME,CUSTOMER_TEL,ORDER_DATE,EMPLOYEE_ID,DISCOUNT) 
      values (v_order_id,v_name,v_tel,dt,V_EMPLOYEE_ID,dbms_random.value(100,0));    
    --插入订单y一个订单包括3个产品
    v:=dbms_random.value(10000,4000);
    v_name:='computer'|| (i mod 3 + 1);
    insert /*+append*/ /*+parallel(BASE_FMLG,4) */ into ORDER_DETAILS(ID,ORDER_ID,PRODUCT_ID,PRODUCT_NUM,PRODUCT_PRICE) 
      values (SEQ_ORDER_DETAILS_ID.NEXTVAL,v_order_id,v_name,2,v);
    v:=dbms_random.value(1000,50);
    v_name:='paper'|| (i mod 3 + 1);
    insert /*+append*/ /*+parallel(BASE_FMLG,4) */ into ORDER_DETAILS(ID,ORDER_ID,PRODUCT_ID,PRODUCT_NUM,PRODUCT_PRICE) 
      values (SEQ_ORDER_DETAILS_ID.NEXTVAL,v_order_id,v_name,3,v);
    v:=dbms_random.value(9000,2000);
    v_name:='phone'|| (i mod 3 + 1);
    insert /*+append*/ /*+parallel(BASE_FMLG,4) */ into ORDER_DETAILS(ID,ORDER_ID,PRODUCT_ID,PRODUCT_NUM,PRODUCT_PRICE)
      values (SEQ_ORDER_DETAILS_ID.NEXTVAL,v_order_id,v_name,1,v); 
    --在触发器关闭的情况下，需要手工计算每个订单的应收金额：
    /*
    select sum(PRODUCT_NUM*PRODUCT_PRICE) into m from ORDER_DETAILS where ORDER_ID=v_order_id;
    if m is null then
     m:=0;
    end if;
    UPDATE ORDERS SET TRADE_RECEIVABLE = m - discount WHERE ORDER_ID=v_order_id; 
    */
    IF I MOD 1000 =0 THEN
      commit; --每次提交会加快插入数据的速度
    END IF;
  end loop;
  --统计用户的所有表，所需时间很长：2千万行数据，需要1600秒，该语句可选
  --dbms_stats.gather_schema_stats(User,estimate_percent=>100,cascade=> TRUE); --estimate_percent采样行的百分比
end;
/

ALTER TRIGGER "ORDERS_TRIG_ROW_LEVEL" ENABLE;
ALTER TRIGGER "ORDER_DETAILS_SNTNS_TRIG" ENABLE;
ALTER TRIGGER "ORDER_DETAILS_ROW_TRIG" ENABLE;

--最后动态增加一个PARTITION_BEFORE_2018分区：
ALTER TABLE ORDERS 
ADD PARTITION PARTITION_BEFORE_2018 VALUES LESS THAN (TO_DATE(' 2018-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'));

ALTER INDEX ORDERS_INDEX_DATE 
MODIFY PARTITION PARTITION_BEFORE_2018 
NOCOMPRESS;

alter table orders logging;
alter table order_details logging;

/*
一切就绪，开始测试：

测试Package：

函数Get_SaleAmount()测试方法：
select MyPack.Get_SaleAmount(11) AS 部门11应收金额 from dual;


过程Get_Employees()测试代码：
set serveroutput on
DECLARE
  V_EMPLOYEE_ID NUMBER;    
BEGIN
  V_EMPLOYEE_ID := 1;
  MYPACK.Get_Employees (  V_EMPLOYEE_ID => V_EMPLOYEE_ID) ;  
  V_EMPLOYEE_ID := 11;
  MYPACK.Get_Employees (  V_EMPLOYEE_ID => V_EMPLOYEE_ID) ;    
END;
/
输出：
1 李董事长
    11 张总
        111 吴经理
        112 白经理
    12 王总
        121 赵经理
        122 刘经理
11 张总
    111 吴经理
    112 白经理


以下时间在0.02秒以内才正常：（id取值从1到20000000）
select * from ORDERS where  order_id=1;
select * from ORDER_DETAILS where  order_id=1;
select * from VIEW_ORDER_DETAILS where order_id=1;

--2.递归查询某个员工及其所有下属，子下属员工。
WITH A (EMPLOYEE_ID,NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,SALARY,MANAGER_ID,DEPARTMENT_ID) AS
  (SELECT EMPLOYEE_ID,NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,SALARY,MANAGER_ID,DEPARTMENT_ID
    FROM employees WHERE employee_ID = 11
    UNION ALL
  SELECT B.EMPLOYEE_ID,B.NAME,B.EMAIL,B.PHONE_NUMBER,B.HIRE_DATE,B.SALARY,B.MANAGER_ID,B.DEPARTMENT_ID
    FROM A, employees B WHERE A.EMPLOYEE_ID = B.MANAGER_ID)
SELECT * FROM A;
--或者
SELECT * FROM employees START WITH EMPLOYEE_ID = 11 CONNECT BY PRIOR EMPLOYEE_ID = MANAGER_ID;


--特殊查询语句：
--查询分区表情况:
select TABLE_NAME,PARTITION_NAME,HIGH_VALUE,PARTITION_POSITION,TABLESPACE_NAME from user_tab_partitions
--查询分区索引情况：
select * from USER_IND_PARTITIONS;


--查询一个分区中的数据
select count(*) from ORDERS partition(PARTITION_BEFORE_2016);
select count(*) from ORDERS partition(PARTITION_BEFORE_2017);
--或者：
--select count(*) from ORDERS where order_date<to_date('2016-01-01','yyyy-mm-dd');

select count(*) from ORDER_DETAILS partition(PARTITION_BEFORE_2016);
select count(*) from ORDER_DETAILS partition(PARTITION_BEFORE_2017);

--收集表的统计信息dbms_stats.gather_table_stats
--分析单个表：
--exec dbms_stats.gather_table_stats(user,'ORDERS',cascade=>true); --cascade=true表示同时收集索引的信息
--exec dbms_stats.gather_table_stats(user,'ORDER_DETAILS',cascade=>true);
--统计用户的所有表：
--CASCADE默认值是TRUE，即会对表、索引和列都会进行分析采集统计信息

exec dbms_stats.delete_schema_stats(User);
exec dbms_stats.gather_schema_stats(User,cascade=>TRUE);
--统计完成后，查询表的统计信息：
select table_name,tablespace_name,num_rows from user_tables;


select * from VIEW_ORDER_DETAILS where order_id=1300;

select * from orders where customer_name='zhang133000';
select * from orders where order_date<to_date('2016-01-01','yyyy-mm-dd');

--查看数据文件的使用情况 
select * from dba_datafiles;

--查看表空间的使用情况 
SELECT a.tablespace_name "表空间名", 
total "表空间大小", 
free "表空间剩余大小", 
(total - free) "表空间使用大小", 
total / (1024 * 1024 * 1024) "表空间大小(G)", 
free / (1024 * 1024 * 1024) "表空间剩余大小(G)", 
(total - free) / (1024 * 1024 * 1024) "表空间使用大小(G)", 
round((total - free) / total, 4) * 100 "使用率 %" 
FROM (SELECT tablespace_name, SUM(bytes) free 
FROM dba_free_space 
GROUP BY tablespace_name) a, 
(SELECT tablespace_name, SUM(bytes) total 
FROM dba_data_files 
GROUP BY tablespace_name) b 
WHERE a.tablespace_name = b.tablespace_name 

--查看数据文件大小:
[oracle@cdh3 ~]$ ls -lh /home/oracle/app/oracle/oradata/orcl/pdbtest/pdbtest_users*
-rw-r----- 1 oracle root 3.8G 11月  1 14:53 /home/oracle/app/oracle/oradata/orcl/pdbtest/pdbtest_users01_2.dbf
-rw-r----- 1 oracle root 2.4G 11月  1 14:53 /home/oracle/app/oracle/oradata/orcl/pdbtest/pdbtest_users01.dbf
-rw-r----- 1 oracle root 1.5G 11月  1 14:53 /home/oracle/app/oracle/oradata/orcl/pdbtest/pdbtest_users02_1.dbf
-rw-r----- 1 oracle root 2.5G 11月  1 14:53 /home/oracle/app/oracle/oradata/orcl/pdbtest/pdbtest_users02_2.dbf
*/
