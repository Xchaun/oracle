11.1.1  字符处理函数
【示例11-1】UPPER()、LOWER()、INITCAP()函数的应用。
本示例将字符串“cddx”转换为全部大写和首字符大写,将“CDDX”转换为全部小写。
SQL> SELECT UPPER('cddx')大写,LOWER('CDDX')小写, INITCAP('cddx')首字符大写 FROM dual;

【示例11-2】REPLACE()函数的应用。
本示例将字符串“Hello cddx”中的字母“l”进行替换。
SQL> SELECT REPLACE('hello cddx ','l')替换1,REPLACE('hello cddx','l','5')替换2 FROM dual; 

【示例11-3】REGEXP_REPLACE()函数的应用。
本例使用REGEXP_REPLACE()函数替换x后面带数字的字符串为Love,并且一个区分大小写,一个不区分大小写。
SQL> SELECT REGEXP_REPLACE('cddx! x12','x[0-9]+','love')v  FROM  dual;

【示例11-4】SUBSTR()函数的第一种使用方法。
分别从字符串“成都大学”的第0个和第1个位置处进行截取,不指定截取长度,这时会截取整个字符串。语句和执行结果如下。
SQL> SELECT SUBSTR('成都大学',0)s1,SUBSTR('成都大学',1)s2  FROM dual;

【示例11-5】截取字符串“成都大学”的内容,起始位置是2,截取的长度为3。
SQL>SELECT SUBSTR('成都大学',2,3)s1 FROM dual;

【示例11-6】CONCAT()函数的应用。
SQL> SELECT CONCAT('成都大学','信息科学与工程学院.')concat  FROM dual;

【示例11-7】获取字符串长度函数。
使用表列出的LENGTH()函数查询字符串“Hello Cddx”的长度。
SQL>SELECT LENGTH('Hello Cddx')len FROM dual;

【示例11-8】INSTR()函数的应用。
返回截取的字符串'hello cddx'在源字符串中的位置
SQL>SELECT INSTR('hello cddx','l')i1,INSTR('hello cddx','cd') i2,
INSTR('hello cddx','l',1,2)i3  FROM dual;

【示例11-9】LTRIM()、RTRIM ()函数的应用
分别使用 LTRIM()函数和 RTRIM()函数删除字符串“ cddx ”中的左边空格和右边空格,
为了明显地观察效果,需要将它们与其他字符连接起来。
SQL> SELECT '1'||LTRIM(' cddx ')||'2' l1,'1'||RTRIM(' cddx ')||'2' r1 FROM dual;

【示例11-10】TRIM()函数的使用。
本示例使用TRIM()函数对字符串进行删除操作,删除了字母c。
SQL> SELECT TRIM('c' from 'ccddxc')ltr FROM dual;

【示例11-11】ASCII()函数和CHR()函数的应用。
SQL>SELECT ASCII('C')C,ASCII('成')成,chr(70)Z FROM dual;

11.1.2  数值函数

【示例11-12】ABS()函数的应用。
本示例求2,-3.3和-33的绝对值。
SQL> SELECT ABS(2),ABS(-3.3),ABS(-33)FROM dual;

【示例11-13】ROUND(x)函数和ROUND(x,y)函数的应用。
本示例使用ROUND(x)函数和ROUND(x,y)函数对操作数进行四舍五入操作。
SQL> SELECT ROUND(-1.13),ROUND(-1.68),ROUND(1.39,1), ROUND(232.38,-2)FROM dual;

【示例11-14】使用TRUNC(x,y)函数。
本示例对操作数进行四舍五入操作,结果保留小数点后面指定y位。
SQL>SELECT TRUNC(1.31,1),TRUNC (1.99,1),TRUNC (1.99,0), TRUNC (19.99,-1)FROM dual;


【示例11-15】求余函数的应用。
SQL> SELECT MOD(31,8),MOD(234,10),MOD(45.5,6)FROM dual;

【示例11-16】SIN(x)和ASIN(x)函数使用。
SQL> SELECT SIN(1),ASIN(0.841470985)FROM dual;

【示例11-17】其他常用数值函数的应用。
SQL> SELECT SQRT(9),SQRT(40)FROM dual;
SQL> SELECT	CEIL(-3.35),CEIL (3.35)FROM dual;
SQL> SELECT FLOOR(-3.35),FLOOR(3.35)FROM dual;
SQL> SELECT SIGN (3),SIGN (-10),SIGN (0)FROM dual;
SQL> SELECT POWER(2,2),POWER(2,-2)FROM dual;
SQL> SELECT EXP(3),EXP(-3),EXP(0)FROM dual;
SQL>SELECT LOG(10,100),LOG(7,49)FROM dual;
SQL> SELECT LN(2),LN(100)FROM dual;

11.1.3  类型转换函数
【示例11-18】使用ASCIISTR函数。
SQL> SELECT ASCIISTR('从零开始学')FROM dual;

【示例11-19】使用BIN_TO_NUM函数。
SQL> SELECT BIN_TO_NUM (1,1,0) FROM dual;

【示例11-20】使用CAST函数
SQL> SELECT CAST('4321' AS NUMBER)+1 as a FROM dual;

【示例11-21】使用TO_CHAR函数。
SQL> SELECT TO_CHAR(10.13245,'99.999'),TO_CHAR (10.13245) FROM dual;

【示例11-22】使用TO_DATE函数。
SQL> SELECT TO_CHAR(TO_DATE('1998-11-26','YYYY-MM-DD'),'month')A FROM dual;

【示例11-23】使用TO_NUMBER函数。
SQL> SELECT TO_NUMBER('1999.123','9999.999')FROM dual;

11.1.4  日期和时间函数

【示例11-24】获取系统当前日期和当前时间。
SQL> SELECT TO_CHAR(SYSDATE,'YYYY-MM-DD HH24：MI：SS')v1,SYSTIMESTAMP FROM dual;

【示例11-25】使用时区函数。
SQL> SELECT DBTIMEZONE,SESSIONTIMEZONE FROM dual;

【示例11-26】使用LAST_DAY函数。
SQL> SELECT LAST_DAY(SYSDATE)A FROM dual;

【示例11-27】使用NEXT_DAY函数。
SQL> SELECT NEXT_DAY(SYSDATE,'星期五')A FROM dual;

【示例11-28】使用EXTRACT函数。
SQL> SELECT EXTRACT (YEAR FROM SYSDATE)A FROM dual;

【示例11-29】使用MONTHS_BETWEEN函数。
SQL> SELECT MONTHS_BETWEEN(TO_DATE('20100228','YYYYMMDD'),
TO_DATE('20110228','YYYYMMDD'))MONTHS FROM dual;

11.1.5  正则表达式函数

【示例11-30】查询first_name以字母T开头的记录。
SQL> SELECT first_name FROM employees WHERE  REGEXP_LIKE(first_name,'^T');

【示例11-31】查询first_name以字母h结尾的记录。
SQL> SELECT first_name FROM employees  WHERE REGEXP_LIKE(first_name,'h$');

【示例11-32】查询first_name包含字母e与n且两个字母之间只有一个字母的记录。
SQL> SELECT first_name FROM employees  WHERE REGEXP_LIKE(first_name ,'e.n');

【示例11-33】查询first_name以字母S开头,且S后面出现ar的记录。
SQL> SELECT first_name FROM EMPLOYEES WHERE REGEXP_LIKE(first_name,'^Sar*');

【示例11-34】查询first_name以字母J开头,且J后面出现字母a至少一次的记录。
SQL> SELECT first_name FROM employees  WHERE REGEXP_LIKE(first_name,'^Ja+');

【示例11-35】查询first_name包含字符串on或者as的记录。
SQL> SELECT first_name FROM employees  WHERE REGEXP_LIKE(first_name ,'on|as');

【示例11-36】查找first_name包含字母z或者w的记录。
SQL> SELECT first_name FROM employees  WHERE REGEXP_LIKE(first_name ,'[zw]');

【示例11-37】查询first_name出现e至少2次的记录。
SQL>SELECT first_name FROM employees  WHERE REGEXP_LIKE(first_name ,'e{2,}');

【示例11-38】查询last_name出现字符串z最少1次,最多2次的记录。
SQL>  SELECT last_name  FROM EMPLOYEES  WHERE REGEXP_LIKE(last_name ,'z{1,2}');

11.2  分组查询及聚合函数

【示例11-39】查询职员工资的平均值。
SQL> SELECT AVG(salary)avg_salary FROM employees;

【示例11-40】COUNT函数示例。
本示例统计EMPLOYEES表中职工总人数A以及有销售提成的总人数B。
COUNT(*)计算所有人数,而COUNT(commission_pct)只计算commission_pct不为空的人数。
SQL> select COUNT(*)A,COUNT(commission_pct)B from employees;

【示例11-41】在employees表中查找职员最高工资和最低工资。
SQL> SELECT MAX(salary)max,MIN(salary)min FROM employees;

【示例11-42】返回EMPLOYEES表中职员工资的标准偏差。
SQL>SELECT STDDEV(salary)"Deviation" FROM employees; 

【示例11-43】在EMPLOYEES表中查询各部门职工工资总和。
SQL> SELECT department_id,SUM(salary)AS depart_total  FROM employees GROUP BY department_id;

【示例11-44】计算EMPLOYEES表中所有薪水的方差。
SQL>SELECT VARIANCE(salary)"Variance" FROM employees;

【示例11-45】根据department_id统计出各部门总人数。
SQL> SELECT department_id,COUNT(*)AS Total   FROM EMPLOYEES GROUP BY department_id;

【示例11-46】根据department_id进行分组,只显示平均工资大于10000的部门信息。
SQL> SELECT department_id,AVG(salary)avg_salary   FROM employees  
 GROUP BY DEPARTMENT_ID HAVING AVG(salary)>10000; 


【示例11-47】组合使用WHERE,GROUP BY,HAVING
本示例根据department_id对EMPLOYEES表中的数据进行分组,并显示平均工资大于10000的部门名称、部门编号信息。
SQL>SELECT e.department_id,d.department_name,AVG(salary)avg_salary 
FROM employees e,departments d
WHERE e.department_id=d.department_id
GROUP BY e.department_id,department_name
HAVING AVG(salary)>10000 ;

11.3  SQL语句优化
【示例11-48】显示部门编号和部门名称。
低效：
SQL> SELECT DISTINCT d.department_id,d.department_name 
FROM departments d,employees e 
WHERE d.department_id = e.department_id;

高效：
SQL> SELECT d.department_id,d.department_name 
FROM  departments d 
WHERE EXISTS (SELECT department_id  FROM employees e 
WHERE d.department_id = e.department_id);
执行分析的过程如下：以HR身份登录到PDBORCL,执行低效语句,输出查询结果,显示执行计划。
$ sqlplus hr/***@localhost/pdborcl
SQL> SET AUTOTRACE ON
SQL> SET LINESIZE 120
SQL> SELECT DISTINCT d.department_id,d.department_name 
FROM departments d,employees e 
WHERE d.department_id = e.department_id;

执行高效语句,输出结果,显示执行计划。
SQL>SET AUTOTRACE ON
SQL>SET LINESSIZE 120
SQL>SELECT d.department_id,d.department_name 
FROM  departments d 
WHERE EXISTS (SELECT department_id  FROM employees e 
WHERE d.department_id = e.department_id);

【示例11-49】查找部门名称包含a字母的职员姓名。
低效：
SQL>SELECT first_name,last_name  
FROM employees e WHERE exists (SELECT department_id 
FROM departments d WHERE d.department_id = e.department_id 
AND d.department_name LIKE '%a%');

高效：
SQL> SELECT FIRST_NAME,LAST_NAME  
FROM EMPLOYEES E ,DEPARTMENTS D
WHERE D.DEPARTMENT_ID  = E.DEPARTMENT_ID 
AND d.department_name LIKE '%a%';

【示例11-50】查找job_id='ST_CLERK',显示job_id和部门平均工资。
低效：
SQL> SELECT job_id,AVG(salary)FROM employees
GROUP BY job_id  HAVING job_id = 'ST_CLERK';

高效：
SQL> SELECT job_id,AVG(salary)FROM employees 
WHERE job_id='ST_CLERK' GROUP BY job_id';

【示例11-51】显示部门名称,部门编号的信息。
低效：
SQL>SELECT department_name,department_id  FROM departments 
WHERE department_id IN (SELECT department_id FROM employees);

高效：
SQL> SELECT department_name,department_id 
FROM departments d
WHERE EXISTS (SELECT department_id FROM employees e 
WHERE d.department_id = e.department_id);

【示例11-52】查找部门编号为100和90的学生信息。
低效：
SQL> SELECT employee_id,first_name,last_name 
FROM employees WHERE department_id=100;
SQL> SELECT employee_id,first_name,last_name 
FROM employees WHERE department_id=90;

高效：
SQL>SELECT DISTINCT employee_id,first_name,last_name
FROM employees 
WHERE department_id=100 OR department_id=90;

【示例11-53】查找EMPLOYEES表中部门编号=50或部门编号=30的职员数量和部门工资之和。
本示例使用DECODE()函数来减少处理时间,可以避免重复扫描相同记录或重复连接相同的表。
低效：
SQL> SELECT COUNT(*),SUM(salary)FROM employees  WHERE department_id='50';
SQL>SELECT COUNT(*),SUM(salary)FROM employees   WHERE department_id='30';

高效：
SQL> SELECT COUNT(DECODE(department_id,'50','XYZ',null))count_01,
COUNT(DECODE(department_id,'30','XYZ',null))count_02,
SUM(DECODE(department_id,'50',SALARY,null))sum_01,
SUM(DECODE(department_id,'30',SALARY,null))sum_02
FROM employees;

